<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

    <!-- 自动扫描 DAO，Service-->
    <context:component-scan base-package="dao"/>
    <context:component-scan base-package="service"/>
    <context:component-scan base-package="controller"/>
    <!--    <context:component-scan base-package="*"/>-->


    <!--引入Redis配置属性文件 -->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>

    <!-- redis -->
    <!-- 配置 JedisPoolConfig 实例 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!-- redis连接池 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy" depends-on="poolConfig">
        <constructor-arg name="poolConfig" ref="poolConfig"/> <!-- 加载jedisPool配置信息 -->
        <constructor-arg name="host" value="${redis.host}"/><!-- redis主机地址 -->
        <constructor-arg name="port" value="${redis.port}"/> <!-- redis连接端口 -->
        <constructor-arg name="password" value="#{'${redis.password}'?:null}"/>
        <constructor-arg name="database" value="${redis.dbIndex}"/>
        <constructor-arg name="timeout" value="${redis.timeout}"/> <!--连接超时-->
    </bean>

<!--    &lt;!&ndash; 配置RedisCacheConfig &ndash;&gt;-->
<!--    <bean id="redisCacheConfig" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">-->
<!--        <constructor-arg ref="jedisConnectionFactory"/>-->
<!--        <constructor-arg ref="redisTemplate"/>-->
<!--        <constructor-arg ref="redisCacheManager"/>-->
<!--        -->
<!--    </bean>-->
<!--    &lt;!&ndash; 配置RedisCacheManager &ndash;&gt;-->
<!--    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
<!--        <constructor-arg ref="jdkredisTemplate"/>-->
<!--        -->
<!--        <property name="defaultExpiration" value="${defaultCacheExpireTime}"/>-->
<!--    </bean>-->


    <!--    &lt;!&ndash; 配置JedisConnectionFactory &ndash;&gt;-->
    <!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--        <property name="hostName" value="${redis.host}"/>-->
    <!--        <property name="port" value="${redis.port}"/>-->
    <!--        <property name="password" value="${redis.password}"/>-->
    <!--        <property name="database" value="${redis.dbIndex}"/>-->
    <!--        <property name="poolConfig" ref="poolConfig"/>-->
    <!--    </bean>-->

    <!--    &lt;!&ndash; Redis 序列化 &ndash;&gt;-->
    <!--    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
    <!--    <bean id="jackson2JsonRedisSerializer"-->
    <!--          class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
    <!--    <bean id="jdkSerializationRedisSerializer"-->
    <!--          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->

    <!--    &lt;!&ndash; 配置RedisTemplate &ndash;&gt;-->
    <!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--        <property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--        <property name="keySerializer" ref="stringRedisSerializer"/>-->
    <!--        <property name="valueSerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--        <property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
    <!--        <property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--    </bean>-->


    <!--    <bean id="jdkredisTemplate" name="jdkredisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--        <property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--        <property name="keySerializer" ref="jdkSerializationRedisSerializer"/>-->
    <!--        <property name="valueSerializer" ref="jdkSerializationRedisSerializer"/>-->
    <!--        <property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
    <!--        <property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--    </bean>-->

    <!--    <bean id="jacksonredisTemplate" name="jacksonredisTemplate"-->
    <!--          class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--        <property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--        <property name="keySerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--        <property name="valueSerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--        <property name="hashKeySerializer" ref="stringRedisSerializer"/>-->
    <!--        <property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>-->
    <!--    </bean>-->


    <!-- 引入 JDBC 配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>


    <!--c3p0连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialPoolSize" value="${initialSize}"/>
        <!-- 连接池最大数量 -->
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdleTime" value="${maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minPoolSize" value="${minPoolSize}"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxConnectionAge" value="${maxWait}"/>
    </bean>

    <!-- 注册sqlSessionFactory, spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--        扫描mybatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

        <!-- 开启缓存支持 -->
        <property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">true</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">false</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">true</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <prop key="useGeneratedKeys">true</prop>
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能 -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过25000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>

    </bean>

    <!-- 配置一个可以批量查询的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>

    <!-- Mapper扫描器，Mapper接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>
